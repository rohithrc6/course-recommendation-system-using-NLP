# -*- coding: utf-8 -*-
"""web_app_script1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1--5bb9cPRzd5qu_wbj90-z6yygxs4QH9
"""

# !pip install streamlit

# from google.colab import drive
# drive.mount('/content/drive')

# Import the necesssary libraries

import os
import pickle
import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import requests
import base64

coursesList = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/606 - Capstone/coursesFull.pkl','rb'))
courseNames = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/606 - Capstone/courses.pkl','rb'))
similarity = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/606 - Capstone/similarity.pkl','rb'))

# Define the recommend function

def recommend(course):
   courseIndex = courseNames[courseNames['CourseName'] == course].index[0]
   distances = similarity[courseIndex]
   recCourseList = []
   recCourseRatings = []
   recCourseDifficulty = []

# Returns a tuple which contains the index of the course and it's correlation with given course

   sortedCourseIndex = sorted(list(enumerate(distances)),reverse=True, key=lambda x:x[1])[1:7]

   for i in sortedCourseIndex:
       recCourseList.append(courseNames.iloc[i[0]].CourseName)
       recCourseRatings.append(coursesList.iloc[i[0]].CourseRating)
       recCourseDifficulty.append(coursesList.iloc[i[0]].DifficultyLevel)

   return recCourseList, recCourseRatings, recCourseDifficulty


st.markdown("<h2 style='text-align: center; color: red;'>Coursera Course Recommendation System</h2>", unsafe_allow_html=True)
st.markdown("<h5 style='text-align: center; color: white;'>Find courses of your interest from a list of over 3,000 courses from Coursera!</h5>", unsafe_allow_html=True)

def get_base64(bin_file):
   with open(bin_file, 'rb') as f:
       data = f.read()
   return base64.b64encode(data).decode()

def set_background(png_file):
   bin_str = get_base64(png_file)
   page_bg_img = '''
   <style>
   .stApp {
     background-image: url("data:image/png;base64,%s");
     background-size: cover;
   }
   </style>
   ''' % bin_str
   st.markdown(page_bg_img, unsafe_allow_html=True)

set_background('/content/drive/MyDrive/Colab Notebooks/606 - Capstone/courseimage.jpeg')

courseListDisplay = courseNames['CourseName'].values
selected_course = st.selectbox(
   "Type or select a course you like :",
   courseListDisplay
)

if st.button('Show Recommended Courses'):
   st.write("Courses similar to ", selected_course, ":")
   recCourseList, recCourseRatings, recCourseDifficulty  = recommend(selected_course)
   df = pd.DataFrame({
   "Course Name": [recCourseList[0], recCourseList[1], recCourseList[2], recCourseList[3], recCourseList[4], recCourseList[5]],
   "Course Rating": [recCourseRatings[0], recCourseRatings[1], recCourseRatings[2], recCourseRatings[3], recCourseRatings[4], recCourseRatings[5]],
   "Difficulty Level": [recCourseDifficulty[0], recCourseDifficulty[1], recCourseDifficulty[2], recCourseDifficulty[3], recCourseDifficulty[4], recCourseDifficulty[5]],
})

# Display the table with st.dataframe()
   st.write(df.to_markdown(index=False), unsafe_allow_html=True)
   st.text(" ")

